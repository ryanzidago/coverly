generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes Resume[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("verification_tokens")
}

model Resume {
  id               String           @id @default(uuid()) @db.Uuid
  title            String?          @db.VarChar
  authorId         String           @db.Uuid
  insertedAt       DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  label            String?          @db.VarChar
  contactEntry     ContactEntry?
  educationEntries EducationEntry[]
  projectEntries   ProjectEntry[]
  author           User             @relation(fields: [authorId], references: [id])
  workEntries      WorkEntry[]

  @@map("resumes")
}

model ContactEntry {
  id            String   @id @default(uuid()) @db.Uuid
  resumeId      String   @unique @db.Uuid
  firstName     String?  @db.VarChar
  lastName      String?  @db.VarChar
  email         String?  @db.VarChar
  phoneNumber   Json?
  location      Json?
  externalLinks Json[]
  insertedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  resume        Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("contact_entries")
}

model WorkEntry {
  id             String            @id @default(uuid()) @db.Uuid
  resumeId       String            @db.Uuid
  position       String?
  startDate      DateTime?
  endDate        DateTime?
  location       Json?
  organisationId String            @db.Uuid
  employmentType EmploymentType?
  insertedAt     DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  achievements   WorkAchievement[]
  organisation   Organisation      @relation(fields: [organisationId], references: [id])
  resume         Resume            @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("work_entries")
}

model EducationEntry {
  id             String                 @id @default(uuid()) @db.Uuid
  resumeId       String                 @db.Uuid
  startDate      DateTime?
  endDate        DateTime?
  location       Json?
  domain         String?                @db.VarChar
  type           String?                @db.VarChar
  organisationId String                 @db.Uuid
  insertedAt     DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  achievements   EducationAchievement[]
  organisation   Organisation           @relation(fields: [organisationId], references: [id])
  resume         Resume                 @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("education_entries")
}

model ProjectEntry {
  id           String               @id @default(uuid()) @db.Uuid
  resumeId     String               @db.Uuid
  startDate    DateTime?
  endDate      DateTime?
  website      String?
  insertedAt   DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  achievements ProjectAchievement[]
  resume       Resume               @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("project_entries")
}

model Organisation {
  id               String           @id @default(uuid()) @db.Uuid
  name             String?          @db.VarChar
  website          String?          @db.VarChar
  insertedAt       DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  educationEntries EducationEntry[]
  workEntries      WorkEntry[]

  @@map("organisations")
}

model WorkAchievement {
  id          String    @id @default(uuid()) @db.Uuid
  workEntryId String    @db.Uuid
  description String?
  insertedAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workEntry   WorkEntry @relation(fields: [workEntryId], references: [id], onDelete: Cascade)

  @@map("work_achievements")
}

model EducationAchievement {
  id               String         @id @default(uuid()) @db.Uuid
  educationEntryId String         @db.Uuid
  description      String?
  insertedAt       DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  educationEntry   EducationEntry @relation(fields: [educationEntryId], references: [id], onDelete: Cascade)

  @@map("education_achievements")
}

model ProjectAchievement {
  id             String       @id @default(uuid()) @db.Uuid
  projectEntryId String       @db.Uuid
  description    String?
  insertedAt     DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  projectEntry   ProjectEntry @relation(fields: [projectEntryId], references: [id], onDelete: Cascade)

  @@map("project_achievements")
}

enum EmploymentType {
  Employee
  SelfEmployed
  Intern
  Trainee
  Apprentice
  Volunteer
}
